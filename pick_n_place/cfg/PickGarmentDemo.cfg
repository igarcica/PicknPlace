#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: Irene Garcia-Camacho (igarcia@iri.upc.edu)

PACKAGE='pick_garment_demo'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

demo = gen.add_group("A Start SM")
test = gen.add_group("C Test pose parameters")
config = gen.add_group("B Configuration parameters")

#       Name                          Type       Reconfiguration level            Description                                         Default   Min   Max
demo.add("start",                     bool_t,    0,                               "Start the state machine",                          False)
demo.add("start_give",                bool_t,    0,                               "Start the state machine from pg1",                 False)
demo.add("start_platform",            bool_t,    0,                               "Start the state machine from pg2",                 False)
demo.add("go",                        bool_t,    0,                               "Continue with the next phase",                     False)
demo.add("stop",                      bool_t,    0,                               "Stop the state machine",                           False)

config.add("pregrasp_offset_x",       double_t,  0,                               "X offset for the pregrasp position",               -0.1,     -1.0,       1.0)
config.add("pregrasp_offset_y",       double_t,  0,                               "Y offset for the pregrasp position",               -0.1,     -1.0,       1.0) 
config.add("pregrasp_offset_z",       double_t,  0,                               "Z offset for the pregrasp position",                0.1,     -1.0,       1.0)
config.add("postgrasp_offset_x",      double_t,  0,                               "X offset for the postgrasp position",              -0.1,     -1.0,       1.0) 
config.add("postgrasp_offset_y",      double_t,  0,                               "Y offset for the postgrasp position",               0.0,     -1.0,       1.0)
config.add("postgrasp_offset_z",      double_t,  0,                               "Z offset for the postgrasp position",               0.2,     -1.0,       1.0) 
config.add("roll",                    double_t,  0,                               "Target X orientation",                             -0.15,    -3.14159,   3.14159) #0
config.add("pitch",                   double_t,  0,                               "Target Y orientation",                              0.65,    -3.14159,   3.14159) 
config.add("yaw",                     double_t,  0,                               "Target Z orientation",                              1.2,     -3.14159,   3.14159) #0 
config.add("position_tol",            double_t,  0,                               "Target position tolerance",                         0.01,     0,         10.0)
config.add("orientation_tol",         double_t,  0,                               "Target orientation tolerance",                      0.01,     0,         10.0)

test.add("test",                      bool_t,    0,                               "Start state machine with a predefined position",    False)
test.add("frame_id",                  str_t,     0,                               "Target pose reference frame",                       "/base_footprint")
test.add("x_pos",                     double_t,  0,                               "Target X position starting with test variable",     0.8,     -2.0,       2.0)#0.6
test.add("y_pos",                     double_t,  0,                               "Target Y position starting with test variable",     0.4,     -2.0,       2.0)#0
test.add("z_pos",                     double_t,  0,                               "Target Z position starting with test variable",     0.9,     -2.0,       2.0)#0.8

exit(gen.generate(PACKAGE, "PickGarmentDemoAlgorithm", "PickGarmentDemo"))
