#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author:

PACKAGE='pick_n_place'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

demo = gen.add_group("A Start SM")
config = gen.add_group("B Configuration parameters")
test = gen.add_group("C Test pose parameters")

#           Name     		Type     Rcnf.lvl   Description             				Default  Min    Max
demo.add("pddl_demo",        	bool_t,     0,      "Execute demo with PDDL actions",	False)
demo.add("get_grasp_point",     bool_t,     0,      "Get real grasp point from vision_pick_place",      False)
demo.add("start_demo",        	bool_t,     0,      "Start SM for demo",           			False)
demo.add("start_experiments",  	bool_t,     0,      "Start SM for experiments (start from pick)",	False)
demo.add("stop",            	bool_t,     0,      "Stop demo",           				False)
demo.add("ok",            	bool_t,     0,      "Continue demo from deformation measure",           False)
demo.add("close",            	bool_t,     0,      "Continue closing gripper",	 	                False)
demo.add("open",            	bool_t,     0,      "Continue openning gripper",	 	                True)
demo.add("close_gripper",    	double_t,   0,      "Close % gripper",        				0.97,    0.0,   1.0)
demo.add("towel",    		bool_t,     0,      "Grasp closure for towel + Vertical",	False)
demo.add("napkin",    		bool_t,     0,      "Grasp closure for napkin + place2",	False)
demo.add("diagonal_place",    	bool_t,     0,      "Diagonal move",        				False)
demo.add("vertical_place",    	bool_t,     0,      "Vertical placement",        			True)
demo.add("rotating_place",     	bool_t,     0,      "Place rotating gripper vertically",           	False)
demo.add("dynamic_place",      	bool_t,     0,      "Place with dynamic motion",           	False)
demo.add("piling",            	bool_t,     0,      "Place the garment in a pile",	           	False)
config.add("handeye_x",         double_t,   0,      "X distance from camera_link to base_link",        	0.44,   -2.0,   2.0)
config.add("handeye_y",         double_t,   0,      "Y distance from camera to base",        		-0.31,   -2.0,   2.0)
config.add("handeye_z",         double_t,   0,      "Z distance from camera to base",        		0.77,   -2.0,   2.0)
config.add("handeye_r",         double_t,   0,      "Roll from camera to base",        			0.0,   	-3.2,   3.2)
config.add("handeye_p",         double_t,   0,      "Pitch from camera to base",        		1.59,   -3.2,   3.2)
config.add("handeye_yw",        double_t,   0,      "Yaw from camera to base",        			3.14, 	-3.2,   3.2)
config.add("rate",              double_t,   0,      "Main loop rate (Hz)",  				30.0,    0.1,   1000.0)
config.add("robot_name",        str_t,      0,      "The robot name",       				"my_gen3")
test.add("grasp_x",             double_t,   0,      "Test X grasp point",        			0.6,     0.0,   1.0)
test.add("grasp_y",             double_t,   0,      "Test T grasp point",        			0.17,    0.0,   1.0)
test.add("grasp_z",             double_t,   0,      "Test Z grasp point",        			0.055,   0.05,  1.0)
test.add("grasp_thetax",        double_t,   0,      "Test X orientation grasp point",        		0.0,    -200.0, 200.0)
test.add("grasp_thetay",        double_t,   0,      "Test Y orientation grasp point",        		-125.5, -200.0, 200.0)
test.add("grasp_thetaz",        double_t,   0,      "Test Z orientation grasp point",        		180.0,  -200.0, 200.0)
test.add("test",            	bool_t,     0,      "Start demo with test grasp point",           	False)
test.add("garment_width",    	double_t,   0,      "Garment width",        				0.25,    0.0,   2.0)
test.add("garment_edge_size",   	double_t,   0,      "Size of object's non grasped edge",      				0.24,    0.0,   2.0)
test.add("pile_height",   	double_t,   0,      "Pile height",      				0.04,    0.0,   2.0)
test.add("table_height",   	double_t,   0,      "Table height (from the robot base)",   		0.005,    0.0,   0.5)

exit(gen.generate(PACKAGE, "PicknPlaceAlgorithm", "PicknPlace"))
